name: Go CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

# Cancel in-progress runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.22'
  WORKING_DIR: ./backend
  CGO_ENABLED: 0

jobs:
  # Fast feedback: linting and formatting checks
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: golangci-lint-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            golangci-lint-${{ runner.os }}-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ${{ env.WORKING_DIR }}
          args: --timeout=5m

      - name: Check gofmt
        run: |
          echo "üîç Checking Go formatting..."
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "‚ùå The following files are not properly formatted:"
            gofmt -s -l .
            echo ""
            echo "Please run: gofmt -s -w ."
            exit 1
          else
            echo "‚úÖ All Go files are properly formatted"
          fi
        working-directory: ${{ env.WORKING_DIR }}

      - name: Check goimports
        run: |
          echo "üîç Checking Go imports..."
          if command -v goimports >/dev/null 2>&1; then
            if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
              echo "‚ùå The following files have import issues:"
              goimports -l .
              echo ""
              echo "Please run: goimports -w ."
              exit 1
            else
              echo "‚úÖ All Go imports are properly formatted"
            fi
          else
            echo "‚ö†Ô∏è  goimports not available, skipping import check"
          fi
        working-directory: ${{ env.WORKING_DIR }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run govulncheck
        run: |
          echo "üîç Running vulnerability scan..."
          if command -v govulncheck >/dev/null 2>&1; then
            govulncheck ./...
          else
            echo "‚ö†Ô∏è  govulncheck not available, installing..."
            go install golang.org/x/vuln/cmd/govulncheck@latest
            govulncheck ./...
          fi
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run gosec (Go Security Checker)
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'
          workdir: ${{ env.WORKING_DIR }}

  # Matrix testing across different Go versions and platforms
  test:
    name: Test (Go ${{ matrix.go-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
        os: [ubuntu-latest]
        include:
          - go-version: '1.22'
            os: windows-latest
          - go-version: '1.22'
            os: macos-latest
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Display Go version
        run: go version
        working-directory: ${{ env.WORKING_DIR }}

      - name: Download dependencies
        run: go mod download
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run tests with race detection and coverage
        run: |
          echo "üß™ Running tests with race detection..."
          go test -race -coverprofile=coverage.out -covermode=atomic -v ./...
        working-directory: ${{ env.WORKING_DIR }}

      - name: Generate coverage report
        run: |
          if [ -f coverage.out ]; then
            go tool cover -html=coverage.out -o coverage.html
            go tool cover -func=coverage.out
          fi
        working-directory: ${{ env.WORKING_DIR }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.go-version == env.GO_VERSION && matrix.os == 'ubuntu-latest'
        with:
          file: ${{ env.WORKING_DIR }}/coverage.out
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-go${{ matrix.go-version }}-${{ matrix.os }}
          path: ${{ env.WORKING_DIR }}/coverage.html
          retention-days: 7

  # Build for multiple platforms
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            name: linux-amd64
          - os: linux
            arch: arm64
            name: linux-arm64
          - os: windows
            arch: amd64
            name: windows-amd64
          - os: darwin
            arch: amd64
            name: darwin-amd64
          - os: darwin
            arch: arm64
            name: darwin-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build backend for ${{ matrix.name }}
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          echo "üî® Building for $GOOS/$GOARCH..."
          go build -ldflags="-s -w" -o backend-${{ matrix.name }} ./cmd/main.go
        working-directory: ${{ env.WORKING_DIR }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.name }}
          path: ${{ env.WORKING_DIR }}/backend-${{ matrix.name }}
          retention-days: 30

  # Integration test (optional, can be expanded)
  integration:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-linux-amd64
          path: ${{ env.WORKING_DIR }}

      - name: Make binary executable
        run: chmod +x backend-linux-amd64
        working-directory: ${{ env.WORKING_DIR }}

      - name: Run integration tests
        run: |
          echo "üîó Running integration tests..."
          # Add your integration tests here
          # Example: ./backend-linux-amd64 --version
          echo "‚úÖ Integration tests completed"
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
