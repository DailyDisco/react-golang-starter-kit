services:
  postgres:
    image: postgres:15-alpine
    container_name: react-golang-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      target: development
    container_name: react-golang-backend
    restart: unless-stopped
    working_dir: /app
    ports:
      - '${API_PORT:-8080}:${API_PORT:-8080}'
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      API_PORT: ${API_PORT:-8080}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_GENERAL_REQUESTS: ${RATE_LIMIT_GENERAL_REQUESTS:-100}
      RATE_LIMIT_GENERAL_WINDOW: ${RATE_LIMIT_GENERAL_WINDOW:-1m}
      RATE_LIMIT_AUTH_REQUESTS: ${RATE_LIMIT_AUTH_REQUESTS:-5}
      RATE_LIMIT_AUTH_WINDOW: ${RATE_LIMIT_AUTH_WINDOW:-1m}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      DEBUG: ${DEBUG:-true}
      CGO_ENABLED: 0
      GO_ENV: development
    volumes:
      - .:/app:cached
      - go_modules:/go/pkg/mod:cached
      - go_cache:/root/.cache/go-build:cached
    command: ['air', '-c', '.air.toml']
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${API_PORT:-8080}/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: development
    container_name: react-golang-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - '5173:5173'
      - '4173:4173' # Preview server port
    environment:
      NODE_ENV: development
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      CI: false
    volumes:
      - ./frontend:/app:cached
      - vite_cache:/app/.vite:cached
      - tanstack_cache:/app/.tanstack:cached
    entrypoint: ['./start-dev.sh']
    depends_on:
      - backend
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:5173']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  go_modules:
    driver: local
  go_cache:
    driver: local
  node_modules:
    driver: local
  vite_cache:
    driver: local
  tanstack_cache:
    driver: local

networks:
  app-network:
    driver: bridge
