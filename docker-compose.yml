services:
  postgres:
    image: postgres:15-alpine
    container_name: react-golang-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devdb
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U devuser -d devdb']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    image: golang:1.24-alpine
    container_name: react-golang-backend
    restart: unless-stopped
    working_dir: /app
    ports:
      - '8080:8080'
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: devuser
      DB_PASSWORD: devpass
      DB_NAME: devdb
      DB_SSLMODE: disable
      CGO_ENABLED: 0
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        apk add --no-cache git &&
        go mod download &&
        go run -tags=dev cmd/main.go
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: node:20-alpine
    container_name: react-golang-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - '5173:5173'
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8080/api
      CI: false
    volumes:
      - ./frontend:/app
    command: >
      sh -c "
        npm install --no-audit --no-fund &&
        npm run dev -- --host 0.0.0.0
      "
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
