services:
  postgres:
    image: postgres:15-alpine
    container_name: react-golang-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-devdb}
      POSTGRES_USER: ${DB_USER:-devuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpass}
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      target: development
    container_name: react-golang-backend
    restart: unless-stopped
    working_dir: /app
    ports:
      - "${API_PORT:-8080}:${API_PORT:-8080}"
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-devuser}
      DB_PASSWORD: ${DB_PASSWORD:-devpass}
      DB_NAME: ${DB_NAME:-devdb}
      DB_SSLMODE: disable
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:4173}
      API_PORT: ${API_PORT:-8080}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_GENERAL_REQUESTS: ${RATE_LIMIT_GENERAL_REQUESTS:-100}
      RATE_LIMIT_GENERAL_WINDOW: ${RATE_LIMIT_GENERAL_WINDOW:-1m}
      RATE_LIMIT_AUTH_REQUESTS: ${RATE_LIMIT_AUTH_REQUESTS:-5}
      RATE_LIMIT_AUTH_WINDOW: ${RATE_LIMIT_AUTH_WINDOW:-1m}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      DEBUG: ${DEBUG:-true}
      CGO_ENABLED: 0
      GO_ENV: development
      # Redis configuration (optional)
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    volumes:
      - ./backend:/app:cached
      - go_modules:/go/pkg/mod:cached
      - go_cache:/root/.cache/go-build:cached
    command: ["air", "-c", ".air.toml"]
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT:-8080}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      target: development
    container_name: react-golang-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - "5173:5173"
      - "4173:4173" # Preview server port
    environment:
      NODE_ENV: development
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8080}
      CI: false
      # Better file watching in Docker on some systems (Mac/Windows)
      CHOKIDAR_USEPOLLING: ${CHOKIDAR_USEPOLLING:-false}
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules # Exclude node_modules from the bind mount
      - vite_cache:/app/.vite:cached
      # DO NOT mount .tanstack as a separate volume - it causes cross-device link errors
      # when the plugin tries to move files from .tanstack/tmp to app/routeTree.gen.ts
    entrypoint: ["./start-dev.sh"]
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  postgres_logs:
    driver: local
  go_modules:
    driver: local
  go_cache:
    driver: local
  vite_cache:
    driver: local

networks:
  app-network:
    driver: bridge
