/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutDemoRouteImport } from './routes/layout-demo'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as R404RouteImport } from './routes/404'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LayoutDemoIndexRouteImport } from './routes/layout-demo.index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutDemoRoute = LayoutDemoRouteImport.update({
  id: '/layout-demo',
  path: '/layout-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutDemoIndexRoute = LayoutDemoIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutDemoRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/demo': typeof DemoRoute
  '/layout-demo': typeof LayoutDemoRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/layout-demo/': typeof LayoutDemoIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/demo': typeof DemoRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/layout-demo': typeof LayoutDemoIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/demo': typeof DemoRoute
  '/layout-demo': typeof LayoutDemoRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/users': typeof UsersRoute
  '/layout-demo/': typeof LayoutDemoIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/demo'
    | '/layout-demo'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/layout-demo/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/demo'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/layout-demo'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/demo'
    | '/layout-demo'
    | '/login'
    | '/profile'
    | '/register'
    | '/users'
    | '/layout-demo/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  DemoRoute: typeof DemoRoute
  LayoutDemoRoute: typeof LayoutDemoRouteWithChildren
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout-demo': {
      id: '/layout-demo'
      path: '/layout-demo'
      fullPath: '/layout-demo'
      preLoaderRoute: typeof LayoutDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/layout-demo/': {
      id: '/layout-demo/'
      path: '/'
      fullPath: '/layout-demo/'
      preLoaderRoute: typeof LayoutDemoIndexRouteImport
      parentRoute: typeof LayoutDemoRoute
    }
  }
}

interface LayoutDemoRouteChildren {
  LayoutDemoIndexRoute: typeof LayoutDemoIndexRoute
}

const LayoutDemoRouteChildren: LayoutDemoRouteChildren = {
  LayoutDemoIndexRoute: LayoutDemoIndexRoute,
}

const LayoutDemoRouteWithChildren = LayoutDemoRoute._addFileChildren(
  LayoutDemoRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  DemoRoute: DemoRoute,
  LayoutDemoRoute: LayoutDemoRouteWithChildren,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
