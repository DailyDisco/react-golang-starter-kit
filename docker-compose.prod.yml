# Production Docker Compose Configuration
# Use this for production deployments with: docker compose -f docker-compose.prod.yml up

services:
  postgres:
    image: postgres:15-alpine
    container_name: react-golang-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - '127.0.0.1:${DB_PORT:-5432}:5432' # Only expose to localhost
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - postgres_logs_prod:/var/log/postgresql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network-prod
    # Security: Don't expose port externally in production
    # ports: []  # Uncomment to disable external access completely

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
    container_name: react-golang-backend-prod
    restart: unless-stopped
    working_dir: /app
    ports:
      - '127.0.0.1:${API_PORT:-8080}:${API_PORT:-8080}' # Only expose to localhost
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE:-require}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      API_PORT: ${API_PORT:-8080}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_GENERAL_REQUESTS: ${RATE_LIMIT_GENERAL_REQUESTS:-100}
      RATE_LIMIT_GENERAL_WINDOW: ${RATE_LIMIT_GENERAL_WINDOW:-1m}
      RATE_LIMIT_AUTH_REQUESTS: ${RATE_LIMIT_AUTH_REQUESTS:-5}
      RATE_LIMIT_AUTH_WINDOW: ${RATE_LIMIT_AUTH_WINDOW:-1m}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: false
      CGO_ENABLED: 0
      GO_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:${API_PORT:-8080}/health']
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - app-network-prod
    # Security: Don't expose port externally if using reverse proxy
    # ports: []  # Uncomment to disable external access completely

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: react-golang-frontend-prod
    restart: unless-stopped
    ports:
      - '80:80' # Expose to the world via HTTP (use reverse proxy for HTTPS)
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - app-network-prod

  # Optional: Nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: react-golang-nginx-prod
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl/certs:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network-prod

volumes:
  postgres_data_prod:
    driver: local
  postgres_logs_prod:
    driver: local

networks:
  app-network-prod:
    driver: bridge
    internal: true # Isolate from external networks
