# Production Docker Compose Configuration
# Use this for production deployments with: docker compose -f docker-compose.prod.yml up -d
# For staging: Set LOG_LEVEL=debug and DEBUG=true in your .env file
# Note: Ensure DOCKER_BUILDKIT=1 is set for optimized builds

services:
  postgres:
    image: postgres:15-alpine
    container_name: react-golang-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    # Don't expose PostgreSQL port externally in production
    expose:
      - "5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - postgres_logs_prod:/var/log/postgresql
    # Optimized PostgreSQL configuration for production
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=1MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_min_duration_statement=1000
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER} -d ${DB_NAME}']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: react-golang-backend-prod
    restart: always
    # Don't expose backend port externally - access through frontend/nginx
    expose:
      - "8080"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      API_PORT: 8080
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_GENERAL_REQUESTS: ${RATE_LIMIT_GENERAL_REQUESTS:-100}
      RATE_LIMIT_GENERAL_WINDOW: ${RATE_LIMIT_GENERAL_WINDOW:-1m}
      RATE_LIMIT_AUTH_REQUESTS: ${RATE_LIMIT_AUTH_REQUESTS:-5}
      RATE_LIMIT_AUTH_WINDOW: ${RATE_LIMIT_AUTH_WINDOW:-1m}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: false
      GO_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL}
        BUILDKIT_INLINE_CACHE: 1
    container_name: react-golang-frontend-prod
    restart: always
    ports:
      - '${FRONTEND_PORT:-80}:80' # Expose to the world via HTTP (use reverse proxy for HTTPS)
    depends_on:
      - backend
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:80/']
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - app-network-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 64M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Optional: Nginx reverse proxy for production with SSL termination
  # Uncomment and configure if you need a separate reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: react-golang-nginx-prod
  #   restart: always
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/ssl/certs:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - app-network-prod
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.5'
  #         memory: 128M

volumes:
  postgres_data_prod:
    driver: local
  postgres_logs_prod:
    driver: local

networks:
  app-network-prod:
    driver: bridge
    # Don't set internal: true as frontend needs external access
    driver_opts:
      com.docker.network.bridge.name: br-react-golang-prod
