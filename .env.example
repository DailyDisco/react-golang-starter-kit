# ============================================
# React + Go Starter Kit - Environment Configuration
# ============================================
# This file contains all environment variables: required essentials at the top,
# and optional advanced features at the bottom (commented out).

# ============================================
# QUICK SETUP INSTRUCTIONS
# ============================================
# 1. Copy this file: cp .env.example .env
# 2. Update JWT_SECRET with a secure random value (see below)
# 3. Update database credentials if not using Docker defaults
# 4. Start the app: docker compose up -d

# ============================================
# DATABASE CONFIGURATION
# ============================================
DB_HOST=localhost
DB_PORT=5432
DB_USER=devuser
DB_PASSWORD=devpass
DB_NAME=devdb
DB_SSLMODE=disable

# ============================================
# AUTHENTICATION & SECURITY
# ============================================
# IMPORTANT: Generate a secure JWT secret for production!
# Run: openssl rand -hex 32
JWT_SECRET=dev-jwt-secret-key-for-development-only-change-in-production
JWT_EXPIRATION_HOURS=24

# ============================================
# API CONFIGURATION
# ============================================
API_PORT=8080
VITE_API_URL=http://localhost:8080

# CORS - comma-separated list of allowed origins
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8080

# ============================================
# APPLICATION SETTINGS
# ============================================
# Environment: development, staging, or production
GO_ENV=development
NODE_ENV=development
DEBUG=true

# Logging level: debug, info, warn, error, fatal
LOG_LEVEL=info
LOG_PRETTY=true

# ============================================
# RATE LIMITING
# ============================================
# Enable/disable rate limiting (true/false)
RATE_LIMIT_ENABLED=true
# Note: Rate limits use sensible defaults. For custom limits, see optional section below

# ============================================
# PRODUCTION NOTES
# ============================================
# For production deployment:
# 1. Generate a secure JWT_SECRET: openssl rand -hex 32
# 2. Set DB_SSLMODE=require for production databases
# 3. Update CORS_ALLOWED_ORIGINS with your production domain(s)
# 4. Set DEBUG=false and LOG_LEVEL=info or warn
# 5. Review optional features below as needed

# ============================================
# ============================================
# OPTIONAL ADVANCED CONFIGURATION
# ============================================
# ============================================
# The sections below are OPTIONAL and only needed for specific features.
# Most projects won't need these initially - uncomment and configure only when needed.

# ============================================
# DETAILED RATE LIMITING CONFIGURATION (Optional)
# ============================================
# Customize rate limits for different endpoint types and user categories.
# If not set, sensible defaults are used (100 req/min for general API).

# IP-based rate limiting (applies to all requests)
# RATE_LIMIT_IP_PER_MINUTE=60
# RATE_LIMIT_IP_PER_HOUR=1000
# RATE_LIMIT_IP_BURST=10

# Authenticated user rate limiting (higher limits for logged-in users)
# RATE_LIMIT_USER_PER_MINUTE=100
# RATE_LIMIT_USER_PER_HOUR=2000
# RATE_LIMIT_USER_BURST=20

# Authentication endpoints (stricter limits for login/register)
# RATE_LIMIT_AUTH_PER_MINUTE=5
# RATE_LIMIT_AUTH_PER_HOUR=100
# RATE_LIMIT_AUTH_BURST=2

# General API endpoints
# RATE_LIMIT_API_PER_MINUTE=100
# RATE_LIMIT_API_PER_HOUR=2000
# RATE_LIMIT_API_BURST=20

# ============================================
# ADVANCED LOGGING CONFIGURATION (Optional)
# ============================================
# Fine-tune logging behavior for debugging and monitoring

# Include user context in logs (user ID, email)
# LOG_INCLUDE_USER_CONTEXT=false

# Log request/response bodies (use carefully - can expose sensitive data)
# LOG_INCLUDE_REQUEST_BODY=false
# LOG_INCLUDE_RESPONSE_BODY=false

# Maximum body size to log (in bytes)
# LOG_MAX_REQUEST_BODY_SIZE=1024
# LOG_MAX_RESPONSE_BODY_SIZE=1024

# Log sampling rate (0.0 to 1.0) - useful for high-traffic apps
# LOG_SAMPLING_RATE=1.0

# Async logging for better performance
# LOG_ASYNC=false

# Security: sanitize sensitive headers and data
# LOG_SANITIZE_HEADERS=true
# LOG_FILTER_SENSITIVE=true
# LOG_ALLOWED_HEADERS=Authorization,Content-Type

# Log time format
# LOG_TIME_FORMAT=2006-01-02T15:04:05Z07:00

# ============================================
# REDIS CACHING (Optional)
# ============================================
# Redis can be added for caching, session management, and performance optimization.
# Not required by default - the app works fine without it.

# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=
# REDIS_DB=0
# Set to 'true' if Redis is required for your app to start
# REDIS_REQUIRED=false

# ============================================
# FILE STORAGE - AWS S3 (Optional)
# ============================================
# By default, files are stored in PostgreSQL database.
# Configure AWS S3 for scalable cloud storage.

# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-bucket-name

# File upload limits
# MAX_FILE_SIZE_MB=10

# ============================================
# EMAIL SERVICE - SMTP (Optional)
# ============================================
# Configure SMTP for email verification and password reset emails.
# Works with services like Resend, AWS SES, Gmail, SendGrid, etc.

# SMTP_HOST=smtp.resend.com
# SMTP_PORT=587
# SMTP_USER=your-smtp-username
# SMTP_PASSWORD=your-smtp-password
# SMTP_FROM=noreply@yoursite.com

# Alternative: Simple email from address
# EMAIL_FROM=noreply@yoursite.com

# ============================================
# PAYMENT PROCESSING (Optional)
# ============================================
# Add payment processing capabilities with Stripe or PayPal

# Stripe
# STRIPE_SECRET_KEY=sk_test_your-stripe-secret-key
# STRIPE_PUBLISHABLE_KEY=pk_test_your-stripe-publishable-key
# STRIPE_WEBHOOK_SECRET=whsec_your-webhook-secret

# PayPal
# PAYPAL_CLIENT_ID=your-paypal-client-id
# PAYPAL_CLIENT_SECRET=your-paypal-client-secret
# PAYPAL_MODE=sandbox

# ============================================
# AI/ML SERVICES (Optional)
# ============================================
# Integrate AI services like Google AI, OpenAI, etc.

# Google AI (Gemini)
# GOOGLE_AI_API_KEY=your-google-ai-api-key
# GEMINI_MODEL=gemini-2.0-flash-lite

# OpenAI
# OPENAI_API_KEY=your-openai-api-key
# OPENAI_MODEL=gpt-4

# ============================================
# ANALYTICS & MONITORING (Optional)
# ============================================
# Add analytics and monitoring services

# Google Analytics
# GA_TRACKING_ID=UA-XXXXXXXXX-X

# Sentry Error Tracking
# SENTRY_DSN=https://your-sentry-dsn
# SENTRY_ENVIRONMENT=production

# PostHog Analytics
# POSTHOG_API_KEY=your-posthog-api-key
# POSTHOG_HOST=https://app.posthog.com

# ============================================
# DEPLOYMENT SPECIFIC (Optional)
# ============================================
# Some platforms provide these automatically

# Railway PostgreSQL (provided automatically by Railway)
# PGHOST=your-railway-host.railway.internal
# PGPORT=5432
# PGUSER=postgres
# PGPASSWORD=your-railway-password
# PGDATABASE=railway

# Server timeout for long-running requests
# SERVER_TIMEOUT=30s

# Frontend port (for production nginx setup)
# FRONTEND_PORT=80

# ============================================
# USAGE NOTES FOR OPTIONAL FEATURES
# ============================================
#
# When to use these:
# - Rate limiting: When you need custom limits per endpoint type
# - Logging: When debugging production issues or compliance requirements
# - Redis: When you need caching, sessions, or >1000 concurrent users
# - S3: When file uploads exceed database storage limits
# - SMTP: When you need email verification/password reset functionality
# - Payment: When building e-commerce or subscription features
# - AI: When adding AI-powered features
# - Analytics: For production user tracking and monitoring
#
# How to use:
# 1. Uncomment the sections you need
# 2. Update with your actual credentials
# 3. Restart your application
# 4. Test the feature works as expected
